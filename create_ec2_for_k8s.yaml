Description: Create t3.small amazon linux ec2 instance for kubernetes cluster
Parameters:
  # MetaData
  Prefix:
    Description: Input prefix for every resources name.
    Type: String
    Default: test
  # EC2 keypair
  EC2KeyName:
    Description: Input a key name for bastion.
    Type: AWS::EC2::KeyPair::KeyName
  # Source IP for bastion access
  SourceIPforBastionAccess:
    Description: Input source IP address for bastion access.
    Type: String
    Default: 0.0.0.0/0
  # Number of EC2 for K8s Worker
  K8sWorkerNum:
    Description: Input number of EC2 for Kubernetes Worker.
    Type: Number
    Default: 2
  # User for K8s nodes
  MyUser:
    Description: Input username for Kubernetes node.
    Type: String
  # User password for K8s nodes
  MyUserPassword:
    Description: Input user password for Kubernetes node.
    Type: String
  # AMI ID for EC2
  MyEC2AmiId:
    Description: Input EC2 Ami ID for Kubernetes node.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_vpc"

  # Public Subnet
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_public_subnet"
      VpcId: !Ref MyVPC

  # Private Subnet
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_private_subnet"
      VpcId: !Ref MyVPC

  # IGW
  MyInternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_igw"
  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGW
      VpcId: !Ref MyVPC

  # NATGW
  MyNatGWEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyNatGWEIP
          - AllocationId
      SubnetId: !Ref MyPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_natgw"

  # RouteTable for Public Subnet
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_rt"
      VpcId: !Ref MyVPC
  MyPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGW
      RouteTableId: !Ref MyPublicRouteTable
  MyPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      SubnetId: !Ref MyPublicSubnet

  # RouteTable for Private Subnet
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}_rt"
      VpcId: !Ref MyVPC
  MyPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGW
      RouteTableId: !Ref MyPrivateRouteTable
  MyPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      SubnetId: !Ref MyPrivateSubnet

  # IAM
  MyAnsibleDynamicInventoryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      RoleName: !Sub "${Prefix}_ansible_dynamic_inventory_role"
  MyAnsibleDynamicInventoryInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref MyAnsibleDynamicInventoryRole

  MyEBSCSIDriverRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
      RoleName: !Sub "${Prefix}_ebs_csi_driver_role"
  MyEBSCSIDriverInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref MyEBSCSIDriverRole

  # Bastion EC2 
  MyBastionEC2InstanceConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref MyEC2AmiId
      KeyName: !Ref EC2KeyName
      InstanceType: t3.small
      AssociatePublicIpAddress: "true"
      SecurityGroups:
        - !Ref MyBastionSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
      IamInstanceProfile: !Ref MyAnsibleDynamicInventoryInstanceProfile
      UserData: !Base64 |
        #!/bin/bash -x
        yum update -y
        yum install -y python-pip
        pip install boto boto3 botocore
        amazon-linux-extras enable ansible2
        yum install -y ansible
        ansible-galaxy collection install ansible.posix
        ansible-galaxy collection install community.general
        yum install -y git
        yum install -y jq
  MyBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}_bastion_sg"
      GroupDescription: Allow SSH for Bastion
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        # SSH
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceIPforBastionAccess
  MyAutoScalingGroupForBastion:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref MyPublicSubnet
      LaunchConfigurationName: !Ref MyBastionEC2InstanceConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-bastion"
          PropagateAtLaunch: true

  # EC2 for Kubernetes Nodes
  MyK8sEC2InstanceConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref MyEC2AmiId
      KeyName: !Ref EC2KeyName
      InstanceType: t3.small
      AssociatePublicIpAddress: "false"
      SecurityGroups:
        - !Ref MyK8sSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
      IamInstanceProfile: !Ref MyEBSCSIDriverInstanceProfile
      UserData:
        Fn::Base64: !Sub
          - | 
            #!/bin/bash
            yum update -y
            yum install -y python-pip
            pip install boto boto3 botocore
            amazon-linux-extras enable ansible2
            yum install -y ansible
            ansible-galaxy collection install ansible.posix
            ansible-galaxy collection install community.general
            yum install -y git
            yum install -y jq
            useradd ${MyUser} -G wheel
            echo "${MyUser}:${MyUserPassword}" | chpasswd
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            systemctl restart sshd
          - {
              MyUser: !Ref MyUser,
              MyUserPassword: !Ref MyUserPassword
            }
  MyK8sSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}_k8s_sg"
      GroupDescription: Allow all connection
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  MyAutoScalingGroupForK8sController:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet
      LaunchConfigurationName: !Ref MyK8sEC2InstanceConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-k8s-controller"
          PropagateAtLaunch: true
    DependsOn: MyNatGW
  MyAutoScalingGroupForWorker:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet
      LaunchConfigurationName: !Ref MyK8sEC2InstanceConfig
      MinSize: !Ref K8sWorkerNum
      MaxSize: !Ref K8sWorkerNum
      DesiredCapacity: !Ref K8sWorkerNum
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-k8s-worker"
          PropagateAtLaunch: true
    DependsOn: MyNatGW
